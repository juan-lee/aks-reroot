#!/bin/bash

set -euo pipefail

DISKS=/dev/nvme[0-9]*n*
GROUP=vgdata
VOLUME=lvoldata
#( /dev/mapper/vgdata-lvoldata on eks )
DEVICE=dev/vgdata/lvoldata
FORMAT=xfs
MOUNT=/data
DOCKER_DATA_ROOT=${MOUNT}/docker
KUBELET_DATA_ROOT=${MOUNT}/kubelet

#################################################
# create physical volumes
# Globals:
#   CHANGED
# Arguments:
#   devices to use
# Returns:
#   None
#################################################
verf_pv () {

   var=$(lsblk -n --nodeps --paths --output MOUNTPOINT $1)
   if [[ ! -z "$var" ]]; then
        echo "$1 is already mounted"
        return
   fi

   var=$(pvs | grep $1)
   if [[ -z "$var" ]]; then
        echo "creating pv $1"
        pvcreate $1
        CHANGED=true
   else
     echo "$1 already pv exists"
   fi

}

#################################################
# create logical group
# Globals:
#   CHANGED
# Arguments:
#   group to create
#   list of pv devices to use
# Returns:
#   None
#################################################
verf_vg () {
    var=$(vgs | grep $1)
    if [[ -z "$var" ]]; then
        echo "creating vg $1 $2"
        vgcreate $1 $2
        CHANGED=true
    fi
}

#################################################
# create logical volume
# Globals:
#   CHANGED
# Arguments:
#   volume to create
#   logical group to use
# Returns:
#   None
#################################################
verf_lv () {
    var=$(lvs | grep $1)
    if [[ -z "$var" ]]; then
        echo "creating lv $1 $2"
        lvcreate -l 100%FREE --type striped -n $1 $2
    else
        echo "$1 $2 lv already exists"
    fi
}

#################################################
# format device
# Globals:
#   CHANGED
# Arguments:
#   device to format
#   filesystem type
# Returns:
#   None
#################################################
verf_fm () {
    var=$(lsblk -n --nodeps --paths --output FSTYPE $1)
    if [[ ! -z "$var" ]]; then
        if [[ "$var" != "$2" ]]; then
            err "$1 has incorrect filesystem"
        fi
        return 
    fi
    echo "formatting $1 as $2"
    mkfs.${2} $1
    CHANGED=true
}


#################################################
# configure mount point for device
# Globals:
#   CHANGED
# Arguments:
#   device to mount
#   path to mount device at
#   filesystem type
# Returns:
#   None
#################################################
verf_mt () {
    # assert existance
    mkdir -p $2

    # verify mount state
    array=( $(mount | grep $1 ) )
    if [[ ${#array} > 0 ]]; then
        if [[ "${array[2]}" != "$2" ]]; then
            err "$1 mounted to incorrect dir"
        fi  
    else
        echo "mounting $1 at $2" 
        mount $1 $2
        CHANGED=true
    fi

    var=$(grep $1 /etc/fstab)

    # backup /etc/fstab 
    cp -f /etc/fstab /etc/fstab.bak
    if [[ ! -z "$var" ]]; then
        echo "updating fstab $1 at $2" 
        sed "s~^${1}.*~${1} ${2} ${3} defaults 0 0~" -i /etc/fstab
    else
        echo "updating fstab $1 at $2" 
        sed "$ a\\${1} ${2} ${3} defaults 0 0" -i /etc/fstab
    fi
}

#################################################
# configure docker data directory
# Globals:
#   CHANGED
# Arguments:
#   target directory for docker workspace
# Returns:
#   None
#################################################
verf_dd () {
    mkdir -p $1
    var=$(jq '. | ."data-root"' /etc/docker/daemon.json)
    if [[ "$var" != \""$1\"" ]]; then
        echo "configuring docker work dir to $1" 
        cp -f /etc/docker/daemon.json /etc/docker/daemon.json.bak
        cat /etc/docker/daemon.json | jq --arg data_root "$1" '. + {"data-root": $data_root}' > /etc/docker/daemon.json.new
        mv -f /etc/docker/daemon.json.new /etc/docker/daemon.json
        CHANGED=true 
    fi
}

#################################################
# configure kubelet data directory
# Globals:
#   CHANGED
# Arguments:
#   target directory for kubelet workspace
# Returns:
#   None
#################################################
verf_kd () {
    mkdir -p $1
    cp -f /etc/default/kubelet /etc/default/kubelet.bak
    var=$(grep "KUBELET_OPTS=" /etc/default/kubelet | grep 'root-dir' | grep $1 )
    if [[ ! -z "$var" ]]; then
        return
    fi
    
    var=$(grep "KUBELET_OPTS=" /etc/default/kubelet | grep 'root-dir' )    
    if [[ ! -z "$var" ]]; then
        echo "configuring kubelet work dir to $1" 
        sed -i "s~\(root-dir=\).* \(.*\)~\1$1 \2~g" /etc/default/kubelet
        CHANGED=true
    else
        echo "configuring kubelet work dir to $1" 
        sed -i "s~KUBELET_OPTS=.*~KUBELET_OPTS=--root-dir=$1~" /etc/default/kubelet
        CHANGED=true
    fi
}

#################################################
# rsync from one local directory to local another
# Globals:
#   CHANGED
# Arguments:
#   target directory for docker workspace
# Returns:
#   None
#################################################
verf_sync () {
    # ignoring changes
    echo "synchronizing $1 to $2" 
    rsync -avzh $1/ $2
}

err() {
    echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
    exit 1
}

#################################################
# MAIN
#################################################
main () {

    CHANGED=false

    # verify pv 
    # pvcreate /dev/nvme[0-9]*n*
    for DISK in ${DISKS}; do verf_pv ${DISK}; done

    # verify vg 
    # vgcreate vgdata /dev/nvme[0-9]*n*
    verf_vg ${GROUP} ${DISKS}

    # verify lv
    verf_lv ${VOLUME} ${GROUP}

    # verf format
    verf_fm ${DEVICE} ${FORMAT}

    # mount data
    verf_mt ${DEVICE} ${MOUNT} ${FORMAT}

    # verify docker config
    verf_dd ${DOCKER_DATA_ROOT}

    
    # verify kubelet config
    verf_kd ${KUBELET_DATA_ROOT}

    verf_sync /var/lib/docker ${DOCKER_DATA_ROOT}
    verf_sync /var/lib/kubelet ${KUBELET_DATA_ROOT}

    if [ "$CHANGED" == true ]; then
        systemctl stop kubelet
        docker stop $(docker ps -a -q)
        systemctl stop docker

        verf_sync /var/lib/docker ${DOCKER_DATA_ROOT}
        verf_sync /var/lib/kubelet ${KUBELET_DATA_ROOT}

        systemctl start docker
        systemctl start kubelet
    fi
}

main "$@"
